<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:sys="clr-namespace:System;assembly=mscorlib"
    xmlns:local="clr-namespace:CustomControlLib"
    xmlns:converter="clr-namespace:CustomControlLib.Converter">
    
    <SolidColorBrush x:Key="ImageButton.Static.Background" Color="#0078C8"/>
    <SolidColorBrush x:Key="ImageButton.Static.Border" Color="#808080"/>
    <SolidColorBrush x:Key="ImageButton.Static.Foreground" Color="White"/>
    <SolidColorBrush x:Key="ImageButton.MouseOver.Background" Color="#0068A8"/>
    <SolidColorBrush x:Key="ImageButton.MouseOver.Border" Color="#808080"/>
    <SolidColorBrush x:Key="ImageButton.MouseOver.Foreground" Color="White"/>
    <SolidColorBrush x:Key="ImageButton.Pressed.Background" Color="#005888"/>
    <SolidColorBrush x:Key="ImageButton.Pressed.Border" Color="#808080"/>
    <SolidColorBrush x:Key="ImageButton.Pressed.Foreground" Color="White"/>
    <SolidColorBrush x:Key="ImageButton.Disabled.Background" Color="#FFF4F4F4"/>
    <SolidColorBrush x:Key="ImageButton.Disabled.Border" Color="#808080"/>
    <SolidColorBrush x:Key="ImageButton.Disabled.Foreground" Color="White"/>

    <ControlTemplate x:Key="ImageButtonTemplate" TargetType="{x:Type local:ImageButton}">
        <Border x:Name="border" Margin="0"  
                BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"  
                Background="{TemplateBinding Background}"  
                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"  
                UseLayoutRounding="True"  
                CornerRadius="{Binding Path=CornerRadius, RelativeSource={RelativeSource Mode=TemplatedParent}}"  
                HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
            <Grid HorizontalAlignment="Center" VerticalAlignment="Center" Margin="{Binding ContentMargin, RelativeSource={RelativeSource TemplatedParent}}">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>

                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>

                <Image x:Name="image" Grid.Row="0" Grid.Column="0" Focusable="False"  
                       Margin="{Binding BorderThickness, ElementName=BD_PART}"  
                       Source="{Binding NormalImage, RelativeSource={RelativeSource TemplatedParent}}"  
                       HorizontalAlignment="Center" VerticalAlignment="Center"/>
                <ContentPresenter x:Name="contentPresenter" Grid.Column="1" Focusable="False"  
                                  Margin="{TemplateBinding Padding}"  
                                  RecognizesAccessKey="True"  
                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"  
                                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"   
                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
            </Grid>
        </Border>

        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=LayoutModel, RelativeSource={RelativeSource Mode=Self}}" Value="LeftToRight">
                <Setter TargetName="contentPresenter" Property="Margin" Value="{Binding TextLeftMargin, RelativeSource={RelativeSource TemplatedParent}}"/>
            </DataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=LayoutModel, RelativeSource={RelativeSource Mode=Self}}" Value="LeftToRight"/>
                    <Condition Binding="{Binding Path=Content, RelativeSource={RelativeSource Mode=Self}}" Value="{x:Null}"/>
                </MultiDataTrigger.Conditions>

                <Setter TargetName="contentPresenter" Property="Margin" Value="0"/>
            </MultiDataTrigger>

            <DataTrigger Binding="{Binding Path=LayoutModel, RelativeSource={RelativeSource Mode=Self}}" Value="OutSideToInSide">
                <Setter TargetName="contentPresenter" Property="Grid.Column" Value="0"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding Path=LayoutModel, RelativeSource={RelativeSource Mode=Self}}" Value="TopToBottom">
                <Setter TargetName="image" Property="Grid.Row" Value="0"/>
                <Setter TargetName="contentPresenter" Property="Grid.Column" Value="0"/>
                <Setter TargetName="contentPresenter" Property="Grid.Row" Value="1"/>
            </DataTrigger>


            <Trigger Property="IsMouseOver" Value="true">
                <Setter TargetName="image" Property="Source" Value="{Binding HoverImage, RelativeSource={RelativeSource TemplatedParent}}"/>
                <Setter TargetName="border" Property="Background" Value="{StaticResource ImageButton.MouseOver.Background}"/>
                <Setter TargetName="border" Property="BorderBrush" Value="{StaticResource ImageButton.MouseOver.Border}"/>
                <!--<Setter TargetName="contentPresenter" Property="TextElement.Foreground" Value="{StaticResource ImageButton.MouseOver.Foreground}"/>-->
            </Trigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=IsMouseOver, RelativeSource={RelativeSource Mode=Self}}" Value="true"/>
                    <Condition Binding="{Binding Path=Background, RelativeSource={RelativeSource Mode=Self}}" Value="Transparent"/>
                </MultiDataTrigger.Conditions>

                <Setter TargetName="image" Property="Source" Value="{Binding HoverImage, RelativeSource={RelativeSource TemplatedParent}}"/>
                <Setter TargetName="border" Property="Background" Value="Transparent"/>
                <Setter TargetName="border" Property="BorderBrush" Value="Transparent"/>
                <!--<Setter TargetName="contentPresenter" Property="TextElement.Foreground" Value="{StaticResource ImageButton.MouseOver.Foreground}"/>-->
            </MultiDataTrigger>

            <Trigger Property="IsPressed" Value="true">
                <Setter TargetName="image" Property="Source" Value="{Binding PressedImage, RelativeSource={RelativeSource TemplatedParent}}"/>
                <Setter TargetName="border" Property="Background" Value="{StaticResource ImageButton.Pressed.Background}"/>
                <Setter TargetName="border" Property="BorderBrush" Value="{StaticResource ImageButton.Pressed.Border}"/>
                <!--<Setter TargetName="contentPresenter" Property="TextElement.Foreground" Value="{StaticResource ImageButton.Pressed.Foreground}"/>-->
            </Trigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=IsPressed, RelativeSource={RelativeSource Mode=Self}}" Value="true"/>
                    <Condition Binding="{Binding Path=Background, RelativeSource={RelativeSource Mode=Self}}" Value="Transparent"/>
                </MultiDataTrigger.Conditions>

                <Setter TargetName="image" Property="Source" Value="{Binding PressedImage, RelativeSource={RelativeSource TemplatedParent}}"/>
                <Setter TargetName="border" Property="Background" Value="Transparent"/>
                <Setter TargetName="border" Property="BorderBrush" Value="Transparent"/>
                <!--<Setter TargetName="contentPresenter" Property="TextElement.Foreground" Value="{StaticResource ImageButton.Pressed.Foreground}"/>-->
            </MultiDataTrigger>

            <Trigger Property="IsEnabled" Value="false">
                <Setter TargetName="image" Property="Source" Value="{Binding DisabledImage, RelativeSource={RelativeSource TemplatedParent}}"/>
                <Setter TargetName="border" Property="Background" Value="{StaticResource ImageButton.Disabled.Background}"/>
                <Setter TargetName="border" Property="BorderBrush" Value="{StaticResource ImageButton.Disabled.Border}"/>
                <Setter TargetName="contentPresenter" Property="TextElement.Foreground" Value="{StaticResource ImageButton.Disabled.Foreground}"/>
            </Trigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=IsEnabled, RelativeSource={RelativeSource Mode=Self}}" Value="false"/>
                    <Condition Binding="{Binding Path=Background, RelativeSource={RelativeSource Mode=Self}}" Value="Transparent"/>
                </MultiDataTrigger.Conditions>

                <Setter TargetName="image" Property="Source" Value="{Binding DisabledImage, RelativeSource={RelativeSource TemplatedParent}}"/>
                <Setter TargetName="border" Property="Background" Value="Transparent"/>
                <Setter TargetName="border" Property="BorderBrush" Value="Transparent"/>
                <Setter TargetName="contentPresenter" Property="TextElement.Foreground" Value="{StaticResource ImageButton.Disabled.Foreground}"/>
            </MultiDataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style TargetType="{x:Type local:ImageButton}">
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="UseLayoutRounding" Value="True"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="Background" Value="{StaticResource ImageButton.Static.Background}"/>
        <Setter Property="BorderBrush" Value="{StaticResource ImageButton.Static.Border}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Template" Value="{StaticResource ImageButtonTemplate}"/>
    </Style>

    <Style x:Key="ImageButtonTransparent" TargetType="{x:Type local:ImageButton}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Margin" Value="0"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="TextLeftMargin" Value="0"/>
        <Setter Property="Template" Value="{StaticResource ImageButtonTemplate}"/>
    </Style>

    <converter:ImageTextBoxMarginLeftConverter x:Key="ITBMLC"/>
    <converter:PlaceholderFontSizeConverter x:Key="PHFSC"/>


    <SolidColorBrush x:Key="ImageTextBox.Static.BorderBrush" Color="#FF909090"/>
    <SolidColorBrush x:Key="ImageTextBox.Focused.BorderBrush" Color="#FF007ACC"/>
    <SolidColorBrush x:Key="ImageTextBox.MouseOver.BorderBrush" Color="#FF007ACC"/>


    <Style TargetType="{x:Type local:ImageTextBox}">
        <Setter Property="Foreground" Value="Black"/>
        <Setter Property="Background" Value="White"/>
        <Setter Property="BorderBrush" Value="{StaticResource ImageTextBox.Focused.BorderBrush}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="FontSize" Value="15"/>
        <Setter Property="CaretBrush" Value="Black"/>
        <Setter Property="Opacity" Value="1"/>
        <Setter Property="CornerRadius" Value="0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:ImageTextBox}">
                    <Border x:Name="border"  
                            Background="{TemplateBinding Background}"  
                            BorderBrush="{TemplateBinding BorderBrush}"  
                            BorderThickness="{TemplateBinding BorderThickness}"  
                            HorizontalAlignment="Stretch" VerticalAlignment="Stretch"  
                            CornerRadius="{Binding CornerRadius, RelativeSource={RelativeSource TemplatedParent}}">


                        <Grid HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="{Binding CornerRadius.TopLeft, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ITBMLC}}"/>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="Auto"/>
                            </Grid.ColumnDefinitions>


                            <Image x:Name="PART_ContentIdentity" Grid.Column="1" Margin="0" Stretch="Uniform"  
                                   Width="{Binding LeftImageWidth, RelativeSource={RelativeSource TemplatedParent}}"  
                                   Height="{Binding LeftImageWidth, RelativeSource={RelativeSource TemplatedParent}}"  
                                   Source="{Binding Image, RelativeSource={RelativeSource TemplatedParent}}"  
                                   HorizontalAlignment="Center" VerticalAlignment="Center"/>


                            <ScrollViewer x:Name="PART_ContentHost" Grid.Column="2" IsTabStop="False" Margin="8,0,8,0"  
                                          Focusable="false" Background="Transparent" SnapsToDevicePixels="True"  
                                          HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"  
                                          HorizontalAlignment="Stretch" VerticalAlignment="Center"  
                                          FontSize="{Binding FontSize, RelativeSource={RelativeSource TemplatedParent}}"  
                                          Foreground="{Binding Foreground, RelativeSource={RelativeSource TemplatedParent}}"  
                                          HorizontalContentAlignment="Left"/>


                            <TextBlock x:Name="PART_PlaceHolder" Grid.Column="2" IsHitTestVisible="False" Margin="10,0,10,0"  
                                       HorizontalAlignment="Left" VerticalAlignment="Center"  
                                       SnapsToDevicePixels="True"  
                                       Visibility="Collapsed" Opacity="0.8"  
                                       TextAlignment="{TemplateBinding TextAlignment}"  
                                       Text="{Binding Path=PlaceHolder, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"  
                                       FontSize="{Binding FontSize, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource PHFSC}}"/>


                            <local:ImageButton x:Name="PART_ClearTextButton" Grid.Column="3" Margin="5" IsTabStop="False"  
                                               FontFamily="/ImageButtonTest01;component/Resources/#iconfont"  
                                               Content="X" FontSize="15"  
                                               HorizontalAlignment="Right"  
                                               VerticalAlignment="Center"  
                                               Style="{StaticResource ImageButtonTransparent}"/>


                            <local:ImageButton x:Name="PART_ExtendIconFontButton" Grid.Column="4" FontSize="20"  
                                               HorizontalAlignment="Center" VerticalAlignment="Center"  
                                               FontFamily="/ImageButtonTest01;component/Resources/#iconfont"  
                                               Content="{Binding ExtendIconFontText, RelativeSource={RelativeSource TemplatedParent}}"  
                                               Style="{StaticResource ImageButtonTransparent}"  
                                               Command="{Binding ExtendButtonCommand, RelativeSource={RelativeSource TemplatedParent}}"  
                                               CommandParameter="{Binding ExtendButtonCommandParameter, RelativeSource={RelativeSource TemplatedParent}}"  
                                               CommandTarget="{Binding ExtendButtonCommandTarget, RelativeSource={RelativeSource TemplatedParent}}"/>


                            <local:ImageButton x:Name="PART_ExtendImageButton" Grid.Column="5"  
                                               HorizontalAlignment="Center" VerticalAlignment="Center"  
                                               FontFamily="/ImageButtonTest01;component/Resources/#iconfont"  
                                               NormalImage="{Binding ExtendNormalImage, RelativeSource={RelativeSource TemplatedParent}}"  
                                               HoverImage="{Binding ExtendHoverImage, RelativeSource={RelativeSource TemplatedParent}}"  
                                               PressedImage="{Binding ExtendPressedImage, RelativeSource={RelativeSource TemplatedParent}}"  
                                               DisabledImage="{Binding ExtendDisabledImage, RelativeSource={RelativeSource TemplatedParent}}"  
                                               Style="{StaticResource ImageButtonTransparent}"  
                                               Command="{Binding ExtendButtonCommand, RelativeSource={RelativeSource TemplatedParent}}"  
                                               CommandParameter="{Binding ExtendButtonCommandParameter, RelativeSource={RelativeSource TemplatedParent}}"  
                                               CommandTarget="{Binding ExtendButtonCommandTarget, RelativeSource={RelativeSource TemplatedParent}}"/>
                        </Grid>
                    </Border>


                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding Path=ExtendNormalImage, RelativeSource={RelativeSource Mode=Self}}" Value="{x:Null}">
                            <Setter TargetName="PART_ExtendImageButton" Property="Visibility" Value="Collapsed"/>
                        </DataTrigger>


                        <DataTrigger Binding="{Binding Path=ExtendIconFontText, RelativeSource={RelativeSource Mode=Self}}" Value="">
                            <Setter TargetName="PART_ExtendIconFontButton" Property="Visibility" Value="Collapsed"/>
                        </DataTrigger>


                        <DataTrigger Binding="{Binding Path=Text, RelativeSource={RelativeSource Mode=Self}}" Value="">
                            <Setter TargetName="PART_PlaceHolder" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="PART_ClearTextButton" Property="IsEnabled" Value="False"/>
                            <Setter TargetName="PART_ExtendIconFontButton" Property="IsEnabled" Value="False"/>
                            <Setter TargetName="PART_ExtendImageButton" Property="IsEnabled" Value="False"/>
                        </DataTrigger>


                        <Trigger Property="IsFocused" Value="False">
                            <Setter TargetName="border" Property="BorderBrush" Value="{StaticResource ImageTextBox.Static.BorderBrush}"/>
                        </Trigger>


                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="border" Property="BorderBrush" Value="{StaticResource ImageTextBox.MouseOver.BorderBrush}"/>
                        </Trigger>


                        <Trigger Property="IsReadOnly" Value="True">
                            <Setter TargetName="PART_ClearTextButton" Property="IsEnabled" Value="False"/>
                            <Setter Property="Opacity" Value="0.6" TargetName="border" />
                        </Trigger>


                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" Value="0.5" TargetName="border" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <SolidColorBrush x:Key="PasswordBox.Static.Foreground" Color="Black"/>
    <SolidColorBrush x:Key="PasswordBox.Static.Background" Color="Transparent"/>
    <SolidColorBrush x:Key="PasswordBox.Static.SelectionBrush" Color="#808F8787"/>

    <SolidColorBrush x:Key="PasswordBox.Static.BorderBrush" Color="#FF909090"/>
    <SolidColorBrush x:Key="PasswordBox.Focused.BorderBrush" Color="#FF007ACC"/>
    <SolidColorBrush x:Key="PasswordBox.MouseOver.BorderBrush" Color="#FF007ACC"/>

    <Style TargetType="{x:Type PasswordBox}" x:Key="DefaultPasswordBox">
        <Setter Property="SelectionBrush" Value="{StaticResource PasswordBox.Static.SelectionBrush}"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="FontSize" Value="16"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="PasswordChar" Value="●"/>
        <Setter Property="Background" Value="{StaticResource PasswordBox.Static.Background}"/>
        <Setter Property="Foreground" Value="{StaticResource PasswordBox.Static.Foreground}"/>
        <Setter Property="BorderBrush" Value="{StaticResource PasswordBox.Static.BorderBrush}"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="CaretBrush" Value="{StaticResource PasswordBox.Static.Foreground}"/>
        <Setter Property="local:PasswordBoxHelper.Attach" Value="True"/>
        <Setter Property="local:PasswordBoxHelper.Password" Value="{Binding Path=Password,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type PasswordBox}">
                    <Border x:Name="PART_Root" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"  
                            CornerRadius="{TemplateBinding local:ControlAttachProperty.CornerRadius}"  
                            BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"  
                            Background="{TemplateBinding Background}">
                        <Grid x:Name="PART_InnerGrid">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="{Binding Path=(local:ControlAttachProperty.CornerRadius).TopLeft, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ITBMLC}}"/>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition  Width="Auto"/>
                                <ColumnDefinition  Width="Auto"/>
                            </Grid.ColumnDefinitions>

                            <!--内容区域-->
                            <ScrollViewer x:Name="PART_ContentHost" Grid.Column="1" Margin="8,0,10,0"  
                                          BorderThickness="0" IsTabStop="False"  
                                          VerticalAlignment="Stretch" Background="{x:Null}"  
                                          VerticalContentAlignment="Center"/>

                            <TextBlock x:Name="PART_PlaceHolder" Grid.Column="1" Foreground="Black"  
                                       IsHitTestVisible="False" Margin="10,0,10,0"  
                                       HorizontalAlignment="Left" VerticalAlignment="Center"  
                                       SnapsToDevicePixels="True"  
                                       Visibility="Collapsed" Opacity="0.8"  
                                       TextAlignment="Center"  
                                       Text="{Binding Path=(local:ControlAttachProperty.PlaceHolder), RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"                          
                                       FontSize="15"
                                       FontFamily="Microsoft YaHei"/>
                            <!--Text="{Binding Path=(local:ControlAttachProperty.PlaceHolder), RelativeSource={RelativeSource TemplatedParent}}"-->
                            <!--附加内容区域-->
                            <!--<Border x:Name="PART_AttachContent" Grid.Column="2" Margin="1"  
                                    HorizontalAlignment="Center" VerticalAlignment="Center">  
                                <ContentControl VerticalAlignment="Center" VerticalContentAlignment="Center"  
                                                Template="{TemplateBinding controls:ControlAttachProperty.AttachContent}"/>  
                            </Border>-->
                            <local:ImageButton x:Name="PART_ClearTextButton" IsTabStop="False" Grid.Column="2"  Margin="5" 
                                          local:ControlAttachProperty.IsClearButtonEnabled="True"  
                                          FontFamily="Microsoft YaHei"  
                                          Content="X" FontSize="15" IsEnabled="True"  
                                          HorizontalAlignment="Right"  
                                          VerticalAlignment="Center"  
                                          Command="local:ControlAttachProperty.ClearTextCommand"  
                                          CommandParameter="{Binding RelativeSource={RelativeSource FindAncestor,AncestorType={x:Type PasswordBox}}}"  
                                          Style="{StaticResource ImageButtonTransparent}"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <!--<DataTrigger Binding="{Binding Path=controls:PasswordBoxHelper.Password, RelativeSource={RelativeSource TemplatedParent}}" Value="">  
                            <Setter TargetName="PART_PlaceHolder" Property="Visibility" Value="Visible"/>  
                        </DataTrigger>-->
                        <Trigger Property="local:PasswordBoxHelper.Password"  Value="">
                            <Setter TargetName="PART_PlaceHolder" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="PART_ClearTextButton" Property="IsEnabled" Value="False"/>
                        </Trigger>

                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter  Property="BorderBrush" Value="{StaticResource PasswordBox.MouseOver.BorderBrush}"/>
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter  Property="BorderBrush" Value="{StaticResource PasswordBox.Focused.BorderBrush}"/>
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="PART_Root" Property="Opacity" Value="0.8"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ClearButtonPasswordBox" TargetType="{x:Type PasswordBox}" BasedOn="{StaticResource DefaultPasswordBox}">
        <Setter Property="local:ControlAttachProperty.AttachContent">
            <Setter.Value>
                <ControlTemplate>
                    <!--<controls:ImageButton x:Name="PART_ClearTextButton" IsTabStop="False"  
                                          controls:ControlAttachProperty.IsClearButtonEnabled="True"  
                                          FontFamily="/ImageButtonTest01;component/Resources/#iconfont"  
                                          Content="" FontSize="20"  
                                          HorizontalAlignment="Right"  
                                          VerticalAlignment="Center"  
                                          Command="controls:ControlAttachProperty.ClearTextCommand"  
                                          CommandParameter="{Binding RelativeSource={RelativeSource FindAncestor,AncestorType={x:Type PasswordBox}}}"  
                                          Style="{StaticResource ImageButtonTransparent}">  
                        <controls:ImageButton.IsEnabled>  
                            <MultiBinding Converter="{StaticResource CBET}">  
                                <Binding Path="controls:PasswordBoxHelper.Password" RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type PasswordBox}}"/>  
                            </MultiBinding>  
                        </controls:ImageButton.IsEnabled>  
                    </controls:ImageButton>-->
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <sys:Double x:Key="BulletCheckBox.FixWidth">70</sys:Double>
    <sys:Double x:Key="BulletCheckBox.FixHeight">28</sys:Double>
    <sys:Double x:Key="BulletCheckBox.Unckecked.HandleWidth">15</sys:Double>
    <sys:Double x:Key="BulletCheckBox.Ckecked.HandleWidth">21</sys:Double>
    <sys:Double x:Key="BulletCheckBox.MovePosition">40</sys:Double>
    <SolidColorBrush x:Key="BulletCheckBox.Unckecked.BorderBrush" Color="#0078C8"/>
    <SolidColorBrush x:Key="BulletCheckBox.Unckecked.Background" Color="White"/>
    <SolidColorBrush x:Key="BulletCheckBox.Unckecked.HandleBackground" Color="#0078C8"/>
    <SolidColorBrush x:Key="BulletCheckBox.Ckecked.Background" Color="#0078C8"/>
    <SolidColorBrush x:Key="BulletCheckBox.OutSide.Foreground" Color="#0078C8"/>


    <sys:Double x:Key="BulletCheckBox.OutsideTextFixWidth">44</sys:Double>
    <sys:Double x:Key="BulletCheckBox.OutsideTextFixHeight">20</sys:Double>
    <sys:Double x:Key="BulletCheckBox.OutsideTextMovePosition">22</sys:Double>
    <sys:Double x:Key="BulletCheckBox.Unckecked.OutsideTextHandleWidth">8</sys:Double>
    <sys:Double x:Key="BulletCheckBox.Ckecked.OutsideTextHandleWidth">12</sys:Double>
    <SolidColorBrush x:Key="BulletCheckBox.Unckecked.OutsideTextBackground" Color="#FFEEEEEE"/>

    <SolidColorBrush x:Key="BulletCheckBox.Ckecked.OutsideTextBackground" Color="#FF0078D7"/>

    <ControlTemplate x:Key="BulletCheckBox_FixTempleate" TargetType="{x:Type local:BulletCheckBox}">

        <Grid HorizontalAlignment="Left" VerticalAlignment="Center">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>

            <Border x:Name="border" Grid.Column="1" SnapsToDevicePixels="True"  
                Margin="0"  
                BorderThickness="2"  
                CornerRadius="12"  
                Background="{StaticResource BulletCheckBox.Unckecked.Background}"  
                BorderBrush="{StaticResource BulletCheckBox.Unckecked.BorderBrush}"  
                Width="{StaticResource BulletCheckBox.FixWidth}"  
                Height="{StaticResource BulletCheckBox.FixHeight}"  
                VerticalAlignment="Stretch">
                <Grid>
                    <Border x:Name="checkHandle"  
                        Margin="3,2"  
                        CornerRadius="12"  
                        Width="{StaticResource BulletCheckBox.Unckecked.HandleWidth}"  
                        Height="{StaticResource BulletCheckBox.Unckecked.HandleWidth}"  
                        SnapsToDevicePixels="True"  
                        Background="{StaticResource BulletCheckBox.Unckecked.HandleBackground}"  
                        HorizontalAlignment="Left">
                        <Border.RenderTransform>
                            <TranslateTransform x:Name="handleTranslate" X="0"/>
                        </Border.RenderTransform>
                    </Border>
                    <TextBlock x:Name="checkedText" Text="{TemplateBinding CheckedText}" FontSize="15"  
                           HorizontalAlignment="Left" VerticalAlignment="Center" TextAlignment="Center"  
                           Margin="5,0,0,0" Visibility="Collapsed"  
                           Foreground="{Binding CheckedForeground, RelativeSource={RelativeSource TemplatedParent}}"/>

                    <TextBlock x:Name="uncheckedText" Text="{TemplateBinding UncheckedText}" FontSize="15"  
                           Foreground="{TemplateBinding Foreground}"  
                           VerticalAlignment="Center" HorizontalAlignment="Right" TextAlignment="Center"  
                           Margin="0,0,5,0" Visibility="Visible">
                    </TextBlock>
                </Grid>
            </Border>

            <TextBlock x:Name="outsideText" Grid.Column="2"  
                       Text="{TemplateBinding UncheckedText}" FontSize="18"  
                       HorizontalAlignment="Left" VerticalAlignment="Center" TextAlignment="Center"  
                       Margin="8,0,0,0" Visibility="Collapsed"  
                       Foreground="{StaticResource BulletCheckBox.OutSide.Foreground}"/>
        </Grid>

        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=IsTextOutside, RelativeSource={RelativeSource Mode=Self}}" Value="True">
                <Setter TargetName="checkedText" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="checkedText" Property="Foreground" Value="Transparent"/>
                <Setter TargetName="uncheckedText" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="outsideText" Property="Visibility" Value="Visible"/>

                <Setter TargetName="border" Property="Width" Value="{StaticResource BulletCheckBox.OutsideTextFixWidth}"/>
                <Setter TargetName="border" Property="Height" Value="{StaticResource BulletCheckBox.OutsideTextFixHeight}"/>
                <Setter TargetName="border" Property="CornerRadius" Value="8"/>

                <Setter TargetName="checkHandle" Property="Width" Value="{StaticResource BulletCheckBox.Unckecked.OutsideTextHandleWidth}"/>
                <Setter TargetName="checkHandle" Property="Height" Value="{StaticResource BulletCheckBox.Unckecked.OutsideTextHandleWidth}"/>
            </DataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=IsChecked, RelativeSource={RelativeSource Mode=Self}}" Value="True"/>
                    <Condition Binding="{Binding Path=IsTextOutside, RelativeSource={RelativeSource Mode=Self}}" Value="True"/>
                </MultiDataTrigger.Conditions>

                <Setter TargetName="border" Property="Background" Value="{StaticResource BulletCheckBox.Ckecked.OutsideTextBackground}"/>
                <Setter TargetName="border" Property="BorderBrush" Value="{StaticResource BulletCheckBox.Ckecked.OutsideTextBackground}"/>
                <Setter TargetName="checkHandle" Property="Background" Value="{StaticResource BulletCheckBox.Unckecked.OutsideTextBackground}"/>
                <Setter TargetName="checkHandle" Property="Width" Value="{StaticResource BulletCheckBox.Ckecked.OutsideTextHandleWidth}"/>
                <Setter TargetName="checkHandle" Property="Height" Value="{StaticResource BulletCheckBox.Ckecked.OutsideTextHandleWidth}"/>

                <MultiDataTrigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="handleTranslate" Storyboard.TargetProperty="X" To="{StaticResource BulletCheckBox.OutsideTextMovePosition}" Duration="0:0:0.2" />
                        </Storyboard>
                    </BeginStoryboard>
                </MultiDataTrigger.EnterActions>

                <MultiDataTrigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="handleTranslate" Storyboard.TargetProperty="X" To="0" Duration="0:0:0.2" />
                        </Storyboard>
                    </BeginStoryboard>
                </MultiDataTrigger.ExitActions>
            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=IsChecked, RelativeSource={RelativeSource Mode=Self}}" Value="True"/>
                    <Condition Binding="{Binding Path=IsTextOutside, RelativeSource={RelativeSource Mode=Self}}" Value="False"/>
                </MultiDataTrigger.Conditions>

                <Setter TargetName="checkedText" Property="Visibility" Value="Visible"/>
                <Setter TargetName="uncheckedText" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="checkHandle" Property="Background" Value="{StaticResource BulletCheckBox.Unckecked.Background}"/>
                <Setter TargetName="checkHandle" Property="Width" Value="{StaticResource BulletCheckBox.Ckecked.HandleWidth}"/>
                <Setter TargetName="checkHandle" Property="Height" Value="{StaticResource BulletCheckBox.Ckecked.HandleWidth}"/>
                <Setter TargetName="border" Property="Background" Value="{StaticResource BulletCheckBox.Ckecked.Background}"/>
                <Setter TargetName="border" Property="BorderBrush" Value="{StaticResource BulletCheckBox.Ckecked.Background}"/>
                <Setter TargetName="outsideText" Property="Text" Value="{Binding CheckedText, RelativeSource={RelativeSource TemplatedParent}}"/>
                <MultiDataTrigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="handleTranslate" Storyboard.TargetProperty="X" To="{StaticResource BulletCheckBox.MovePosition}" Duration="0:0:0.2" />
                        </Storyboard>
                    </BeginStoryboard>
                </MultiDataTrigger.EnterActions>
                <MultiDataTrigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="handleTranslate" Storyboard.TargetProperty="X" To="0" Duration="0:0:0.2" />
                        </Storyboard>
                    </BeginStoryboard>
                </MultiDataTrigger.ExitActions>
            </MultiDataTrigger>

            <Trigger Property="IsEnabled" Value="false">
                <Setter TargetName="border" Property="Opacity" Value="0.8"/>
                <Setter TargetName="outsideText" Property="Opacity" Value="0.8"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="BulletCheckBox_Templeate" TargetType="{x:Type local:BulletCheckBox}">
        <Viewbox x:Name="viewBox" Stretch="None"  HorizontalAlignment="Left" VerticalAlignment="Center">
            <Grid HorizontalAlignment="Left" VerticalAlignment="Center">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>

                <Border x:Name="border" Grid.Column="1" SnapsToDevicePixels="True"    
                Margin="0"    
                BorderThickness="2"    
                CornerRadius="12"    
                Background="{StaticResource BulletCheckBox.Unckecked.Background}"    
                BorderBrush="{StaticResource BulletCheckBox.Unckecked.BorderBrush}"    
                Width="{StaticResource BulletCheckBox.FixWidth}"    
                Height="{StaticResource BulletCheckBox.FixHeight}"    
                VerticalAlignment="Stretch">
                    <Grid>
                        <Border x:Name="checkHandle"    
                        Margin="3,2"    
                        CornerRadius="12"    
                        Width="{StaticResource BulletCheckBox.Unckecked.HandleWidth}"    
                        Height="{StaticResource BulletCheckBox.Unckecked.HandleWidth}"    
                        SnapsToDevicePixels="True"    
                        Background="{StaticResource BulletCheckBox.Unckecked.HandleBackground}"    
                        HorizontalAlignment="Left">
                            <Border.RenderTransform>
                                <TranslateTransform x:Name="handleTranslate" X="0"/>
                            </Border.RenderTransform>
                        </Border>
                        <TextBlock x:Name="checkedText" Text="{TemplateBinding CheckedText}" FontSize="16"    
                           HorizontalAlignment="Left" VerticalAlignment="Center" TextAlignment="Center"    
                           Margin="5,0,0,0" Visibility="Collapsed"    
                           Foreground="{Binding CheckedForeground, RelativeSource={RelativeSource TemplatedParent}}"/>

                        <TextBlock x:Name="uncheckedText" Text="{TemplateBinding UncheckedText}" FontSize="16"    
                           Foreground="{TemplateBinding Foreground}"    
                           VerticalAlignment="Center" HorizontalAlignment="Right" TextAlignment="Center"    
                           Margin="0,0,5,0" Visibility="Visible">
                        </TextBlock>
                    </Grid>
                </Border>

                <TextBlock x:Name="outsideText" Grid.Column="2"    
                       Text="{TemplateBinding UncheckedText}" FontSize="15"    
                       HorizontalAlignment="Left" VerticalAlignment="Center" TextAlignment="Center"    
                       Margin="8,0,0,0" Visibility="Collapsed"    
                       Foreground="{StaticResource BulletCheckBox.OutSide.Foreground}"/>
            </Grid>
        </Viewbox>

        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding IsViewBoxEnable,RelativeSource={RelativeSource Self}}" Value="True">
                <Setter TargetName="viewBox" Property="Stretch" Value="Uniform"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding Path=IsTextOutside, RelativeSource={RelativeSource Mode=Self}}" Value="True">
                <Setter TargetName="checkedText" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="checkedText" Property="Foreground" Value="Transparent"/>
                <Setter TargetName="uncheckedText" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="outsideText" Property="Visibility" Value="Visible"/>
            </DataTrigger>

            <Trigger Property="IsChecked" Value="True">
                <Setter TargetName="checkedText" Property="Visibility" Value="Visible"/>
                <Setter TargetName="uncheckedText" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="checkHandle" Property="Background" Value="{StaticResource BulletCheckBox.Unckecked.Background}"/>
                <Setter TargetName="checkHandle" Property="Width" Value="{StaticResource BulletCheckBox.Ckecked.HandleWidth}"/>
                <Setter TargetName="checkHandle" Property="Height" Value="{StaticResource BulletCheckBox.Ckecked.HandleWidth}"/>
                <Setter TargetName="border" Property="Background" Value="{StaticResource BulletCheckBox.Ckecked.Background}"/>
                <Setter TargetName="border" Property="BorderBrush" Value="{StaticResource BulletCheckBox.Ckecked.Background}"/>
                <Setter TargetName="outsideText" Property="Text" Value="{Binding CheckedText, RelativeSource={RelativeSource TemplatedParent}}"/>
                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="handleTranslate" Storyboard.TargetProperty="X" To="{StaticResource BulletCheckBox.MovePosition}" Duration="0:0:0.2" />
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="handleTranslate" Storyboard.TargetProperty="X" To="0" Duration="0:0:0.2" />
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.ExitActions>
            </Trigger>

            <Trigger Property="IsEnabled" Value="false">
                <Setter TargetName="border" Property="Opacity" Value="0.5"/>
                <Setter TargetName="outsideText" Property="Opacity" Value="0.5"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!--固定大小-->
    <Style x:Key="BulletCheckBoxFixedStyle" TargetType="{x:Type local:BulletCheckBox}">
        <Setter Property="Background" Value="#FF4A9E4A"/>
        <Setter Property="Foreground" Value="#FFAAAAAA"/>
        <Setter Property="CheckedForeground" Value="White"/>
        <Setter Property="CheckedBackground" Value="#FF0CC50C"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Width" Value="{Binding Width, RelativeSource={RelativeSource TemplatedParent}}"/>
        <Setter Property="Height" Value="{Binding Height, RelativeSource={RelativeSource TemplatedParent}}"/>
        <Setter Property="Margin" Value="1"/>
        <Setter Property="Template" Value="{StaticResource BulletCheckBox_FixTempleate}"/>
    </Style>

    <!--ViewBox可缩放-->
    <Style TargetType="{x:Type local:BulletCheckBox}">
        <Setter Property="Background" Value="#FF4A9E4A"/>
        <Setter Property="Foreground" Value="#FFAAAAAA"/>
        <Setter Property="CheckedForeground" Value="White"/>
        <Setter Property="CheckedBackground" Value="#FF0CC50C"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Width" Value="{Binding Width, RelativeSource={RelativeSource TemplatedParent}}"/>
        <Setter Property="Height" Value="{Binding Height, RelativeSource={RelativeSource TemplatedParent}}"/>
        <Setter Property="Margin" Value="0"/>
        <Setter Property="Template" Value="{StaticResource BulletCheckBox_Templeate}"/>
    </Style>

</ResourceDictionary>
